Compile module and dump instructions

// MEXAS Compile Test 2 Input
//
// File:        mexas_compile_test_2.in
// Author:      Bob Walton (walton@acm.org)
// Date:        Fri Aug  4 21:47:34 EDT 2023
//
// The authors have placed this program in the public
// domain; they make no warranty and accept no liability
// for this program.

// BEG ... END Test
// Z = MIN ( X, Y )
//
PUSHI 152 X
    [####]PUSHI T_PUSH 0 0 0 152; X
PUSHI 196 Y
    [####]PUSHI T_PUSH 0 0 0 196; Y
PUSHI 0 Z
    [####]PUSHI T_PUSH 0 0 0 0; Z
BEG
    [####]BEG T_BEG 0 0 0 [$ MISSING $]; [$ MISSING $]
    PUSH X
    [####]PUSHS T_PUSH 2 0 0 [$ MISSING $]; [< X * >]
    PUSH Y
    [####]PUSHS T_PUSH 2 0 0 [$ MISSING $]; [< Y * >]
    JMPLT ITS-X
    [####]JMPLT T_JMPS 0 0 0 [$ MISSING $]; ITS-X
    PUSH Y
    [####]PUSHS T_PUSH 1 0 0 [$ MISSING $]; [< Y * >]
    POP Z
    [####]POPS T_POP 1 0 0 [$ MISSING $]; [< Z * >]
    JMP DONE
    [####]JMP T_JMP 0 0 0 [$ MISSING $]; DONE
    LABEL ITS-X
    [####]JMPLT T_JMPS 0 0 4 [$ MISSING $]; ITS-X
    PUSH X
    [####]PUSHS T_PUSH 2 0 0 [$ MISSING $]; [< X * >]
    POP Z
    [####]POPS T_POP 1 0 0 [$ MISSING $]; [< Z * >]
    LABEL DONE
    [####]JMP T_JMP 0 0 3 [$ MISSING $]; DONE
    PUSHI 2000 UNUSED
    [####]PUSHI T_PUSH 0 0 0 2000; UNUSED
END
    [####]END T_END 1 0 0 [$ MISSING $]; [$ MISSING $]
    STACKS: VARIABLES: Z Y X
POP
    [####]POPS T_POP 0 0 0 [$ MISSING $]; [< * Z >]
POP
    [####]POPS T_POP 0 0 0 [$ MISSING $]; [< * Y >]
POP
    [####]POPS T_POP 0 0 0 [$ MISSING $]; [< * X >]
// BEGL ... ENDL Test
// Z = SUM { I: I = 4 TO I = 6 }
//
PUSHI 6 LIMIT
    [####]PUSHI T_PUSH 0 0 0 6; LIMIT
PUSHI 0 SUM
    [####]PUSHI T_PUSH 0 0 0 0; SUM
PUSHI 4 I
    [####]PUSHI T_PUSH 0 0 0 4; I
BEGL 2
    [####]BEGL T_BEGL 0 0 0 [$ MISSING $]; [$ MISSING $]
    STACKS: VARIABLES: next-I next-SUM ; I SUM LIMIT
    PUSH I
    [####]PUSHS T_PUSH 2 0 0 [$ MISSING $]; [< I * >]
    PUSH LIMIT
    [####]PUSHS T_PUSH 5 0 0 [$ MISSING $]; [< LIMIT * >]
    JMPGT DONE
    [####]JMPGT T_JMPS 0 0 0 [$ MISSING $]; DONE
    PUSH SUM
    [####]PUSHS T_PUSH 3 0 0 [$ MISSING $]; [< SUM * >]
    PUSH I
    [####]PUSHS T_PUSH 3 0 0 [$ MISSING $]; [< I * >]
    ADD
    [####]ADD T_AOP 0 0 0 [$ MISSING $]; *
    POP next-SUM
    [####]POPS T_POP 2 0 0 [$ MISSING $]; [< next-SUM * >]
    PUSH I
    [####]PUSHS T_PUSH 2 0 0 [$ MISSING $]; [< I * >]
    PUSHI 1
    [####]PUSHI T_PUSH 0 0 0 1; *
    ADD
    [####]ADD T_AOP 0 0 0 [$ MISSING $]; *
    POP next-I
    [####]POPS T_POP 1 0 0 [$ MISSING $]; [< next-I * >]
ENDL
    [####]ENDL T_ENDL 0 2 11 [$ MISSING $]; [$ MISSING $]
    STACKS: VARIABLES: I SUM LIMIT
LABEL DONE
    [####]JMPGT T_JMPS 2 0 10 [$ MISSING $]; DONE
POP
    [####]POPS T_POP 0 0 0 [$ MISSING $]; [< * I >]
POP
    [####]POPS T_POP 0 0 0 [$ MISSING $]; [< * SUM >]
POP
    [####]POPS T_POP 0 0 0 [$ MISSING $]; [< * LIMIT >]
// DEPTH TEST
//
PUSHI 1 X
    [####]PUSHI T_PUSH 0 0 0 1; X
BEG
    [####]BEG T_BEG 0 0 0 [$ MISSING $]; [$ MISSING $]
PUSHI 2 Y
    [####]PUSHI T_PUSH 0 0 0 2; Y
BEG
    [####]BEG T_BEG 0 0 0 [$ MISSING $]; [$ MISSING $]
PUSHI 3 Z
    [####]PUSHI T_PUSH 0 0 0 3; Z
    STACKS: VARIABLES: Z ; Y ; X
END
    [####]END T_END 1 0 0 [$ MISSING $]; [$ MISSING $]
    STACKS: VARIABLES: Y ; X
END
    [####]END T_END 1 0 0 [$ MISSING $]; [$ MISSING $]
    STACKS: VARIABLES: X
Compile returned true
