// MEXAS Compile Test 13 Input
//
// File:        mexas_compile_test_13.mex
// Author:      Bob Walton (walton@acm.org)
// Date:        Thu Jan 23 01:17:16 AM EST 2025
//
// The authors have placed this program in the public
// domain; they make no warranty and accept no liability
// for this program.
// MEXAS Time Test

// Empty stack test
//
PUSHI 100
    [14:0;1] PUSHI T_PUSH 0 0 0 100; *
TEST_INSTRUCTION ADD  // stack too small
    [15:1;1] ADD T_AOP 0 0 0
TEST_INSTRUCTION JMP  // immedC = 0
    [16:2;1] JMP T_JMP 0 0 0
PUSHI "HELLO"
    [17:3;2] PUSHI T_PUSH 0 0 0 "HELLO"; *
TEST_INSTRUCTION JMPGEQ 0 0 1 // invalid arg
    [18:4;2] JMPGEQ T_JMPS 0 0 1
TEST_INSTRUCTION JMP 100 0 1 // immedA too large
    [19:5;2] JMP T_JMP 100 0 1
TEST_INSTRUCTION JMP 0 0 1000000 // immedC too large
    [20:6;2] JMP T_JMP 0 0 1000000
PUSHI +INF
    [21:7;3] PUSHI T_PUSH 0 0 0 inf; *
TEST_INSTRUCTION JMPCNT 0 0 1 1 // INF count
    [22:8;3] JMPCNT T_JMPS 0 0 1 1
PUSHI 5
    [23:9;4] PUSHI T_PUSH 0 0 0 5; *
TEST_INSTRUCTION JMPCNT 0 0 1 // immedD <= 0
    [24:10;4] JMPCNT T_JMPS 0 0 1
PUSHI 0
    [25:11;5] PUSHI T_PUSH 0 0 0 0; *
PUSHI +INF
    [26:12;6] PUSHI T_PUSH 0 0 0 inf; *
PUSHI +INF
    [27:13;7] PUSHI T_PUSH 0 0 0 inf; *
TEST_INSTRUCTION JMPGEQ 0 1 1 // invalid arg
    [28:14;7] JMPGEQ T_JMPS 0 1 1
PUSHI NAN
    [29:15;8] PUSHI T_PUSH 0 0 0 nan; *
TEST_INSTRUCTION JMPGEQ 0 0 1 // invalid arg
    [30:16;8] JMPGEQ T_JMPS 0 0 1
TEST_INSTRUCTION JMPGEQ 0 4 1 // immedB is not 0 or 1
    [31:17;8] JMPGEQ T_JMPS 0 4 1
TEST_INSTRUCTION JMP [ 5 ] 0 0 1 // too big trace depth
    [32:18;8] JMP T_JMP[5] 0 0 1
TEST_INSTRUCTION PUSHS 100  // too big immedA
    [33:19;8] PUSHS T_PUSH 100 0 0
TEST_INSTRUCTION PUSHG  // no module
    [34:20;8] PUSHG T_PUSH 0 0 0
TEST_INSTRUCTION PUSHL 0 1  // immedB > lexical level
    [35:21;8] PUSHL T_PUSH 0 1 0
TEST_INSTRUCTION PUSHL 1000  // immedA > stack length
    [36:22;8] PUSHL T_PUSH 1000 0 0

BEGF PUSH-POP-TEST ARG1 ARG2
    [38:23;10] BEGF T_BEGF 2 1 0; [< PUSH-POP-TEST ARG1 ARG2 >]
    TEST_INSTRUCTION PUSHL 1000 1
    [39:24;10] PUSHL T_PUSH 1000 1 0
        // fp[1] + immedA > stack length
    TEST_INSTRUCTION PUSHL 1000 0
    [41:25;10] PUSHL T_PUSH 1000 0 0
        // fp[0] + immedA > ap[1]
    TEST_INSTRUCTION PUSHA 0 2  // immedB > p->level
    [43:26;10] PUSHA T_PUSH 0 2 0
    TEST_INSTRUCTION PUSHA 3 1  // immedA > fp[1]
    [44:27;10] PUSHA T_PUSH 3 1 0
    TEST_INSTRUCTION PUSHNARGS  // immedB == 0
    [45:28;10] PUSHNARGS T_PUSH 0 0 0
    PUSHI 2.5
    [46:29;11] PUSHI T_PUSH 0 0 0 2.5; *
    TEST_INSTRUCTION PUSHV 0 2  // immedB > p->level
    [47:30;11] PUSHV T_PUSH 0 2 0
    TEST_INSTRUCTION PUSHV 0 1  // top not int >= 0
    [48:31;11] PUSHV T_PUSH 0 1 0
    TEST_INSTRUCTION POPS 10    // immedA > frame len
    [49:32;11] POPS T_POP 10 0 0
    TEST_INSTRUCTION DEL 10 0 1
    [50:33;11] DEL T_POP 10 0 1
        // immedA + immedC > frame length
    PUSHI "RESULT"
    [52:34;12] PUSHI T_PUSH 0 0 0 "RESULT"; *
    RET 1
    [53:35;11] RET T_RET 0 1 1
ENDF
    [38:23;11] BEGF T_BEGF 2 1 14; [< PUSH-POP-TEST ARG1 ARG2 >]
    [54:36;8] ENDF T_ENDF 0 1 0

PUSHI "VALUE 1"
    [56:37;9] PUSHI T_PUSH 0 0 0 "VALUE 1"; *
PUSHI "VALUE 2"
    [57:38;10] PUSHI T_PUSH 0 0 0 "VALUE 2"; *
CALL PUSH-POP-TEST 2 RESULT
    [58:39;9] CALLM T_CALLM 2 1 23; [< PUSH-POP-TEST RESULT >]

PUSHI 10
    [60:40;10] PUSHI T_PUSH 0 0 0 10; *
PUSHI 20
    [61:41;11] PUSHI T_PUSH 0 0 0 20; *
TEST_INSTRUCTION VPUSH 1
    [62:42;11] VPUSH T_SET 1 0 0
TEST_INSTRUCTION VPOP 1
    [63:43;11] VPOP T_GET 1 0 0
TEST_INSTRUCTION VSIZE 1
    [64:44;11] VSIZE T_GET 1 0 0

BEGF GET-SET-TEST
    [66:45;11] BEGF T_BEGF 0 1 0; [< GET-SET-TEST >]
    PUSHI 1
    [67:46;12] PUSHI T_PUSH 0 0 0 1; *
    PUSHI 2
    [68:47;13] PUSHI T_PUSH 0 0 0 2; *
    TEST_INSTRUCTION GET 10 0 0
    [69:48;13] GET T_GET 10 0 0
    TEST_INSTRUCTION SET 10 0 0
    [70:49;13] SET T_SET 10 0 0
    TEST_INSTRUCTION GET 1 0 10
    [71:50;13] GET T_GET 1 0 10
    TEST_INSTRUCTION SET 1 0 10
    [72:51;13] SET T_SET 1 0 10
    TEST_INSTRUCTION GET 1 1 1
    [73:52;13] GET T_GET 1 1 1
    TEST_INSTRUCTION SET 1 1 0
    [74:53;13] SET T_SET 1 1 0
    TEST_INSTRUCTION GET 1 0 0
    [75:54;13] GET T_GET 1 0 0
    TEST_INSTRUCTION SET 1 0 0
    [76:55;13] SET T_SET 1 0 0
    PUSHOBJ 10 5
    [77:56;14] PUSHOBJ T_SET 10 0 5; *
    PUSHI 1e10
    [78:57;15] PUSHI T_PUSH 0 0 0 10000000000; *
    TEST_INSTRUCTION GET 1 0 0
    [79:58;15] GET T_GET 1 0 0
    PUSHI 3
    [80:59;16] PUSHI T_PUSH 0 0 0 3; *
    TEST_INSTRUCTION SET 2 0 1
    [81:60;16] SET T_SET 2 0 1
    POP
    [82:61;15] POPS T_POP 0 0 0; [< * * >]
    POP
    [83:62;14] POPS T_POP 0 0 0; [< * * >]
    PUSHI TRUE
    [84:63;15] PUSHI T_PUSH 0 0 0 *TRUE*; *
    TEST_INSTRUCTION GET 1 0 0
    [85:64;15] GET T_GET 1 0 0
    PUSHI 3
    [86:65;16] PUSHI T_PUSH 0 0 0 3; *
    TEST_INSTRUCTION SET 2 0 1
    [87:66;16] SET T_SET 2 0 1
    POP
    [88:67;15] POPS T_POP 0 0 0; [< * * >]
    POP
    [89:68;14] POPS T_POP 0 0 0; [< * * >]
    PUSHI 5
    [90:69;15] PUSHI T_PUSH 0 0 0 5; *
    PUSHI 6
    [91:70;16] PUSHI T_PUSH 0 0 0 6; *
    TEST_INSTRUCTION SET 2 0 1
    [92:71;16] SET T_SET 2 0 1
    POP
    [93:72;15] POPS T_POP 0 0 0; [< * * >]
    POP
    [94:73;14] POPS T_POP 0 0 0; [< * * >]
    TEST_INSTRUCTION GETI 10
    [95:74;14] GETI T_GET 10 0 0
    TEST_INSTRUCTION GETI 0
    [96:75;14] GETI T_GET 0 0 0
    PUSHI 5
    [97:76;15] PUSHI T_PUSH 0 0 0 5; *
    TEST_INSTRUCTION GETI 0 0 0 "foo"
    [98:77;15] GETI T_GET 0 0 0 "foo"
    TEST_INSTRUCTION SETI 10
    [99:78;15] SETI T_SET 10 0 0
    PUSHI 6
    [100:79;16] PUSHI T_PUSH 0 0 0 6; *
    TEST_INSTRUCTION SETI 1 0 0 "foo"
    [101:80;16] SETI T_SET 1 0 0 "foo"
    POP
    [102:81;15] POPS T_POP 0 0 0; [< * * >]
    TEST_INSTRUCTION SETI 1 0 0 TRUE
    [103:82;15] SETI T_SET 1 0 0 *TRUE*
    RET 0
    [104:83;15] RET T_RET 0 1 0
ENDF
    [66:45;15] BEGF T_BEGF 0 1 40; [< GET-SET-TEST >]
    [105:84;11] ENDF T_ENDF 0 1 0

CALL GET-SET-TEST 0
    [107:85;11] CALLM T_CALLM 0 0 45; [< GET-SET-TEST >]

TEST_INSTRUCTION END
    [109:86;11] END T_END 0 0 0

BEGF BEG-END-TEST ARG1
    [111:87;12] BEGF T_BEGF 1 1 0; [< BEG-END-TEST ARG1 >]
    TEST_INSTRUCTION BEG 10
    [112:88;12] BEG T_BEG 10 0 0
    TEST_INSTRUCTION BEGL 0 10
    [113:89;12] BEGL T_BEGL 0 10 0
    TEST_INSTRUCTION ENDL 10
    [114:90;12] ENDL T_ENDL 10 0 0
    TEST_INSTRUCTION CONT 10
    [115:91;12] CONT T_CONT 10 0 0
    TEST_INSTRUCTION ENDL 0 5
    [116:92;12] ENDL T_ENDL 0 5 0
    TEST_INSTRUCTION CONT 0 5
    [117:93;12] CONT T_CONT 0 5 0
    TEST_INSTRUCTION ENDL 0 0 100
    [118:94;12] ENDL T_ENDL 0 0 100
    TEST_INSTRUCTION CONT 0 0 100
    [119:95;12] CONT T_CONT 0 0 100
    TEST_INSTRUCTION CONT [ 2 ]
    [120:96;12] CONT T_CONT[2] 0 0 0
    TEST_INSTRUCTION TRACE 10
    [121:97;12] TRACE T_ALWAYS 10 0 0
    TEST_INSTRUCTION WARN 10
    [122:98;12] WARN T_ALWAYS 10 0 0
    TEST_INSTRUCTION ERROR 10
    [123:99;12] ERROR T_ALWAYS 10 0 0
    TEST_INSTRUCTION BEGF 0 2 1000
    [124:100;12] BEGF T_BEGF 0 2 1000
    TEST_INSTRUCTION BEGF 0 1
    [125:101;12] BEGF T_BEGF 0 1 0
    TEST_INSTRUCTION RET 0 0
    [126:102;12] RET T_RET 0 0 0
    TEST_INSTRUCTION ENDF 0 0
    [127:103;12] ENDF T_ENDF 0 0 0
    TEST_INSTRUCTION RET 0 1 2
    [128:104;12] RET T_RET 0 1 2
    TEST_INSTRUCTION RET 0 1 1
    [129:105;12] RET T_RET 0 1 1
    PUSHI 200
    [130:106;13] PUSHI T_PUSH 0 0 0 200; *
    RET 1
    [131:107;12] RET T_RET 0 1 1
ENDF
    [111:87;12] BEGF T_BEGF 1 1 22; [< BEG-END-TEST ARG1 >]
    [132:108;11] ENDF T_ENDF 0 1 0

PUSHI 100
    [134:109;12] PUSHI T_PUSH 0 0 0 100; *
CALL BEG-END-TEST 1 X
    [135:110;12] CALLM T_CALLM 1 1 87; [< BEG-END-TEST X >]

TEST_INSTRUCTION RET
    [137:111;12] RET T_RET 0 0 0
TEST_INSTRUCTION ENDF
    [138:112;12] ENDF T_ENDF 0 0 0

TEST_INSTRUCTION CALLG
    [140:113;12] CALLG T_CALLG 0 0 0
TEST_INSTRUCTION CALLM 0 0 10000
    [141:114;12] CALLM T_CALLM 0 0 10000
TEST_INSTRUCTION CALLM 0 0 0
    [142:115;12] CALLM T_CALLM 0 0 0
* {14:0,1,1} PUSHI: * <= 100

!!! FATAL PROGRAM FORMAT ERROR:
    illegal SP: stack too small for instruction
    PC->MODULE = mexas_compile_test_13.mex
* {15:1,1,2} ADD AOP 0 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 100 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    JMP immedC == 0; illegal
    PC->MODULE = mexas_compile_test_13.mex
* {16:2,1,3} JMP JMP 0 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 99 > 0
* {17:3,2,4} PUSHI: * <= "HELLO"

!!! FATAL ERROR:  invalid operands to a conditional jump instruction
* {18:4,0,5} JMPGEQ location 5 with invalid operand(s)
             ARGS = 100 "HELLO"
TREATING JMP AS UNSUCCESSFUL AND CONTINUING BECAUSE PROCESS->TEST == 98
    > 0

!!! FATAL PROGRAM FORMAT ERROR:
    JMP immedA is greater than stack size
    PC->MODULE = mexas_compile_test_13.mex
* {19:5,0,6} JMP JMP 100 0 1 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 97 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    JMP immedC too large; target is beyond module end
    PC->MODULE = mexas_compile_test_13.mex
* {20:6,0,7} JMP JMP 0 0 1000000 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 96 > 0
* {21:7,1,8} PUSHI: * <= inf

!!! FATAL ERROR:  invalid operands to a conditional jump instruction
* {22:8,1,9} JMPCNT location 9 with invalid operand(s)
             ARGS = inf 1
TREATING JMP AS UNSUCCESSFUL AND CONTINUING BECAUSE PROCESS->TEST == 95
    > 0
* {23:9,2,10} PUSHI: * <= 5

!!! FATAL PROGRAM FORMAT ERROR:
    JMPCNT immedD is not a finite number > 0
    PC->MODULE = mexas_compile_test_13.mex
* {24:10,2,11} JMPCNT JMPS 0 0 1 *MISSING*
    ARGS = 5 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 94 > 0
* {25:11,3,12} PUSHI: * <= 0
* {26:12,4,13} PUSHI: * <= inf
* {27:13,5,14} PUSHI: * <= inf

!!! FATAL ERROR:  invalid operands to a conditional jump instruction
* {28:14,4,15} JMPGEQ* location 15 with invalid operand(s)
               ARGS = inf inf
TREATING JMP AS UNSUCCESSFUL AND CONTINUING BECAUSE PROCESS->TEST == 93
    > 0
* {29:15,5,16} PUSHI: * <= nan

!!! FATAL ERROR:  invalid operands to a conditional jump instruction
* {30:16,3,17} JMPGEQ location 17 with invalid operand(s)
               ARGS = inf nan
TREATING JMP AS UNSUCCESSFUL AND CONTINUING BECAUSE PROCESS->TEST == 92
    > 0

!!! FATAL PROGRAM FORMAT ERROR:
    JMP immedB != 0 or 1; illegal
    PC->MODULE = mexas_compile_test_13.mex
* {31:17,3,18} JMPGEQ JMPS 0 4 1 *MISSING*
    ARGS = 5 0
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 91 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    if JMP were executed, trace_depth would become negative
    PC->MODULE = mexas_compile_test_13.mex
* {32:18,3,19} JMP JMP [5] 0 0 1 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 90 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    PUSHD: immedA equal to or larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
* {33:19,3,20} PUSHS PUSH 100 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 89 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    PUSHG immedD is not a module
    PC->MODULE = mexas_compile_test_13.mex
* {34:20,3,21} PUSHG PUSH 0 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 88 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    PUSHL immedB larger than current lexical level
    PC->MODULE = mexas_compile_test_13.mex
* {35:21,3,22} PUSHL PUSH 0 1 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 87 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    PUSHL immedA too large; addresses variable beyond the end of the
    function frame
    PC->MODULE = mexas_compile_test_13.mex
* {36:22,3,23} PUSHL PUSH 1000 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 86 > 0
* {38:23,3,24} BEGF
* {56:37,4,25} PUSHI: * <= "VALUE 1"
* {57:38,5,26} PUSHI: * <= "VALUE 2"
* {58:39,5,27} CALLM to BEGF: PUSH-POP-TEST, ARG1="VALUE 1",
                              ARG2="VALUE 2"

!!! FATAL PROGRAM FORMAT ERROR:
    PUSHL immedA too large; addresses variable beyond the end of the
    function frame
    PC->MODULE = mexas_compile_test_13.mex
*** {39:24,5,28} PUSHL PUSH 1000 1 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 85 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    PUSHL immedA too large; addresses variable beyond the end of the
    function frame
    PC->MODULE = mexas_compile_test_13.mex
*** {41:25,5,29} PUSHL PUSH 1000 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 84 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    PUSHA: invalid immedB; 0 or greater than current lexical level
    PC->MODULE = mexas_compile_test_13.mex
*** {43:26,5,30} PUSHA PUSH 0 2 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 83 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    PUSHA immedA too large; addresses non-extant argument
    PC->MODULE = mexas_compile_test_13.mex
*** {44:27,5,31} PUSHA PUSH 3 1 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 82 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    PUSHNARGS: invalid immedB; 0 or greater than current lexical level
    PC->MODULE = mexas_compile_test_13.mex
*** {45:28,5,32} PUSHNARGS PUSH 0 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 81 > 0
*** {46:29,6,33} PUSHI: * <= 2.5

!!! FATAL PROGRAM FORMAT ERROR:
    PUSHV immedB is 0 or greater than current lexical level
    PC->MODULE = mexas_compile_test_13.mex
*** {47:30,6,34} PUSHV PUSH 0 2 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 80 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    PUSHV: top of stack is not a non-negative integer
    PC->MODULE = mexas_compile_test_13.mex
*** {48:31,6,35} PUSHV PUSH 0 1 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 79 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    POPS: immedA equal to or larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
*** {49:32,6,36} POPS POP 10 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 78 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    DEL: immedA + immedC larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
*** {50:33,6,37} DEL POP 10 0 1 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 77 > 0
*** {52:34,7,38} PUSHI: * <= "RESULT"
*** {53:35,4,39} RET to CALLM: PUSH-POP-TEST, RESULT="RESULT"
* {60:40,5,40} PUSHI: * <= 10
* {61:41,6,41} PUSHI: * <= 20

!!! FATAL PROGRAM FORMAT ERROR:
    object argument is not an object
    PC->MODULE = mexas_compile_test_13.mex
* {62:42,6,42} VPUSH SET 1 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 76 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    object argument is not an object
    PC->MODULE = mexas_compile_test_13.mex
* {63:43,6,43} VPOP GET 1 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 75 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    object argument is not an object
    PC->MODULE = mexas_compile_test_13.mex
* {64:44,6,44} VSIZE GET 1 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 74 > 0
* {66:45,6,45} BEGF
* {107:85,6,46} CALLM to BEGF: GET-SET-TEST
*** {67:46,7,47} PUSHI: * <= 1
*** {68:47,8,48} PUSHI: * <= 2

!!! FATAL PROGRAM FORMAT ERROR:
    GET: immedA equal to or larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
*** {69:48,8,49} GET GET 10 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 73 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    SET: immedA equal to or larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
*** {70:49,8,50} SET SET 10 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 72 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    GET: immedC equal to or larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
*** {71:50,8,51} GET GET 1 0 10 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 71 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    SET: immedC equal to or larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
*** {72:51,8,52} SET SET 1 0 10 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 70 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    GET: immedB !=0 but immedC != 0
    PC->MODULE = mexas_compile_test_13.mex
*** {73:52,8,53} GET GET 1 1 1 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 69 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    SET: immedB != 0 but immedC != 1
    PC->MODULE = mexas_compile_test_13.mex
*** {74:53,8,54} SET SET 1 1 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 68 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    object argument is not an object
    PC->MODULE = mexas_compile_test_13.mex
*** {75:54,8,55} GET GET 1 0 0 *MISSING*
    ARGS = 1 2
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 67 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    object argument is not an object
    PC->MODULE = mexas_compile_test_13.mex
*** {76:55,8,56} SET SET 1 0 0 *MISSING*
    ARGS = 1 2
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 66 > 0
*** {77:56,9,57} PUSHOBJ: * <= NEW OBJ ( 10, 5)
*** {78:57,10,58} PUSHI: * <= 10000000000

!!! FATAL PROGRAM FORMAT ERROR:
    GET: numeric label is not integer in range (-1e9, +1e9)
    PC->MODULE = mexas_compile_test_13.mex
*** {79:58,10,59} GET GET 1 0 0 *MISSING*
    ARGS = {} 10000000000
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 65 > 0
*** {80:59,11,60} PUSHI: * <= 3

!!! FATAL PROGRAM FORMAT ERROR:
    SET: numeric label is not integer in range (-1e9, +1e9)
    PC->MODULE = mexas_compile_test_13.mex
*** {81:60,11,61} SET SET 2 0 1 *MISSING*
    ARGS = {} 10000000000
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 64 > 0
*** {82:61,10,62} POPS: * <= * = 3
*** {83:62,9,63} POPS: * <= * = 10000000000
*** {84:63,10,64} PUSHI: * <= *TRUE*

!!! FATAL PROGRAM FORMAT ERROR:
    label argument is not a label
    PC->MODULE = mexas_compile_test_13.mex
*** {85:64,10,65} GET GET 1 0 0 *MISSING*
    ARGS = {} *TRUE*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 63 > 0
*** {86:65,11,66} PUSHI: * <= 3

!!! FATAL PROGRAM FORMAT ERROR:
    label argument is not a label
    PC->MODULE = mexas_compile_test_13.mex
*** {87:66,11,67} SET SET 2 0 1 *MISSING*
    ARGS = {} *TRUE*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 62 > 0
*** {88:67,10,68} POPS: * <= * = 3
*** {89:68,9,69} POPS: * <= * = *TRUE*
*** {90:69,10,70} PUSHI: * <= 5
*** {91:70,11,71} PUSHI: * <= 6

!!! FATAL PROGRAM FORMAT ERROR:
    SET: vector element does not exist
    PC->MODULE = mexas_compile_test_13.mex
*** {92:71,11,72} SET SET 2 0 1 *MISSING*
    ARGS = {} 5
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 61 > 0
*** {93:72,10,73} POPS: * <= * = 6
*** {94:73,9,74} POPS: * <= * = 5

!!! FATAL PROGRAM FORMAT ERROR:
    GETI: immedA equal to or larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
*** {95:74,9,75} GETI GET 10 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 60 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    label argument is not a label
    PC->MODULE = mexas_compile_test_13.mex
*** {96:75,9,76} GETI GET 0 0 0 *MISSING*
    ARGS = {} *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 59 > 0
*** {97:76,10,77} PUSHI: * <= 5

!!! FATAL PROGRAM FORMAT ERROR:
    object argument is not an object
    PC->MODULE = mexas_compile_test_13.mex
*** {98:77,10,78} GETI GET 0 0 0 foo
    ARGS = 5 "foo"
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 58 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    SETI: immedA equal to or larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
*** {99:78,10,79} SETI SET 10 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 57 > 0
*** {100:79,11,80} PUSHI: * <= 6

!!! FATAL PROGRAM FORMAT ERROR:
    object argument is not an object
    PC->MODULE = mexas_compile_test_13.mex
*** {101:80,11,81} SETI SET 1 0 0 foo
    ARGS = 5 "foo"
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 56 > 0
*** {102:81,10,82} POPS: * <= * = 6

!!! FATAL PROGRAM FORMAT ERROR:
    label argument is not a label
    PC->MODULE = mexas_compile_test_13.mex
*** {103:82,10,83} SETI SET 1 0 0 *TRUE*
    ARGS = {} *TRUE*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 55 > 0
*** {104:83,6,84} RET to CALLM: GET-SET-TEST

!!! FATAL PROGRAM FORMAT ERROR:
    END: trace depth would become negative if instruction was executed
    PC->MODULE = mexas_compile_test_13.mex
* {109:86,6,85} END END 0 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 54 > 0
* {111:87,6,86} BEGF
* {134:109,7,87} PUSHI: * <= 100
* {135:110,7,88} CALLM to BEGF: BEG-END-TEST, ARG1=100

!!! FATAL PROGRAM FORMAT ERROR:
    BEG/NOP/END: immedA larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
*** {112:88,7,89} BEG BEG 10 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 53 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    BEGL: immedB larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
*** {113:89,7,90} BEGL BEGL 0 10 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 52 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    ENDL/CONT: immedA larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
*** {114:90,7,91} ENDL ENDL 10 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 51 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    ENDL/CONT: immedA larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
*** {115:91,7,92} CONT CONT 10 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 50 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    ENDL/CONT: immedA + 2 * immedB larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
*** {116:92,7,93} ENDL ENDL 0 5 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 49 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    ENDL/CONT: immedA + 2 * immedB larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
*** {117:93,7,94} CONT CONT 0 5 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 48 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    ENDL/CONT: immedC too large; associated BEGL non-extant
    PC->MODULE = mexas_compile_test_13.mex
*** {118:94,7,95} ENDL ENDL 0 0 100 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 47 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    ENDL/CONT: immedC too large; associated BEGL non-extant
    PC->MODULE = mexas_compile_test_13.mex
*** {119:95,7,96} CONT CONT 0 0 100 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 46 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    CONT: trace depth would become negative if instruction was executed
    PC->MODULE = mexas_compile_test_13.mex
*** {120:96,7,97} CONT CONT [2] 0 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 45 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    TRACE/WARN/ERROR: immedA larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
*** {121:97,7,98} TRACE ALWAYS 10 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 44 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    TRACE/WARN/ERROR: immedA larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
*** {122:98,7,99} WARN ALWAYS 10 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 43 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    TRACE/WARN/ERROR: immedA larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
*** {123:99,7,100} ERROR ALWAYS 10 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 42 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    BEGF: immedC too large; target address beyond module length
    PC->MODULE = mexas_compile_test_13.mex
*** {124:100,7,101} BEGF BEGF 0 2 1000 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 41 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    BEGF: immedB != current lexical level + 1
    PC->MODULE = mexas_compile_test_13.mex
*** {125:101,7,102} BEGF BEGF 0 1 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 40 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    RET/ENDF: immedB != current lexical level
    PC->MODULE = mexas_compile_test_13.mex
*** {126:102,7,103} RET RET 0 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 39 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    RET/ENDF: immedB != current lexical level
    PC->MODULE = mexas_compile_test_13.mex
*** {127:103,7,104} ENDF ENDF 0 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 38 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    RET: immedC != return stack nresults
    PC->MODULE = mexas_compile_test_13.mex
*** {128:104,7,105} RET RET 0 1 2 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 37 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    RET: immedC is larger than current frame length
    PC->MODULE = mexas_compile_test_13.mex
*** {129:105,7,106} RET RET 0 1 1 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 36 > 0
*** {130:106,8,107} PUSHI: * <= 200
*** {131:107,7,108} RET to CALLM: BEG-END-TEST, X=200

!!! FATAL PROGRAM FORMAT ERROR:
    RET/ENDF: return stack is empty
    PC->MODULE = mexas_compile_test_13.mex
* {137:111,7,109} RET RET 0 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 35 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    RET/ENDF: return stack is empty
    PC->MODULE = mexas_compile_test_13.mex
* {138:112,7,110} ENDF ENDF 0 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 34 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    CALL immedD is not a module
    PC->MODULE = mexas_compile_test_13.mex
* {140:113,7,111} CALLG CALLG 0 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 33 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    CALL immedC is equal to or larger than module length
    PC->MODULE = mexas_compile_test_13.mex
* {141:114,7,112} CALLM CALLM 0 0 10000 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 32 > 0

!!! FATAL PROGRAM FORMAT ERROR:
    CALL target is not a BEGF
    PC->MODULE = mexas_compile_test_13.mex
* {142:115,7,113} CALLM CALLM 0 0 0 *MISSING*
SKIPPING INSTRUCTION AND CONTINUING BECAUSE PROCESS->TEST == 31 > 0
mexas_compile_test_13.mex successfully compiled
